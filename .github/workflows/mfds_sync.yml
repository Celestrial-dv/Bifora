# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# MFDS (식약처) 화장품 성분 자동 동기화 Workflow v1.0
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 파일: /biplex/mfds_sync.yml
#
# 📅 생성일: 2025-10-21
# 🔄 최종 수정: v1.0 (2025-10-21) - 초기 버전 생성
#
# 📋 기능:
#   - 식약처 화장품원료 정보 API 자동 수집
#   - 매일 새벽 2시(KST) 자동 실행 또는 수동 실행
#   - data_sync_webhook.php를 통한 안전한 데이터 동기화
#   - api_fetch_logs 테이블에 MFDS_COSMETIC 타입으로 로그 기록
#
# 🔗 데이터 흐름:
#   GitHub Actions → data_sync_webhook.php (type=mfds) → api_fetch.php → MySQL
#
# 🎯 대상 테이블:
#   - mfds_cosmetic_ingredients (표준명, 영문명, CAS번호, 기원정의 등)
#   - api_fetch_logs (수집 로그: MFDS_COSMETIC)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

name: MFDS Data Sync (식약처 화장품 성분)

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 🕐 실행 트리거 설정
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
on:
  schedule:
    # 매일 새벽 2시(한국시간) 실행
    # 한국시간(KST) = UTC + 9시간
    # 02:00 KST = 17:00 UTC (전날)
    - cron: '10 13 * * *'
  
  # 수동 실행 옵션 (Actions 탭에서 실행 가능)
  workflow_dispatch:
    inputs:
      force_run:
        description: '강제 실행 (true: 전체 재수집, false: 일반 실행)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 🔐 환경 변수 (GitHub Secrets에서 주입)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
env:
  CAFE24_WEBHOOK_URL: ${{ secrets.CAFE24_SYNC_URL }}
  SYNC_TOKEN: ${{ secrets.SYNC_ACTION_TOKEN }}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📦 작업 정의
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🔍 사전 진단: 서버 연결 및 토큰 검증
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  preflight:
    name: 🔍 사전 진단
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
      
    steps:
      - name: ⚙️ 환경 변수 확인
        id: check
        run: |
          echo "🔍 환경 변수 검증 중..."
          
          # Webhook URL 확인
          if [ -z "${{ env.CAFE24_WEBHOOK_URL }}" ]; then
            echo "❌ CAFE24_SYNC_URL이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 토큰 확인
          if [ -z "${{ env.SYNC_TOKEN }}" ]; then
            echo "❌ SYNC_ACTION_TOKEN이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 환경 변수 검증 완료"
          echo "can_proceed=true" >> $GITHUB_OUTPUT
      
      - name: 🌐 서버 연결 테스트
        run: |
          echo "🌐 서버 연결 확인 중..."
          
          # Webhook URL에서 베이스 디렉토리 추출
          BASE_URL="${{ env.CAFE24_WEBHOOK_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          # 통합 webhook PHP 파일 경로 구성
          WEBHOOK_URL="${BASE_DIR}/data_sync_webhook.php"
          
          # HEAD 요청으로 서버 연결 확인
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X HEAD "$WEBHOOK_URL" || echo "000")
          
          if [ "$HTTP_CODE" == "000" ]; then
            echo "❌ 서버에 연결할 수 없습니다."
            exit 1
          elif [ "$HTTP_CODE" == "404" ]; then
            echo "⚠️  data_sync_webhook.php 파일을 찾을 수 없습니다. (HTTP 404)"
            echo "📍 예상 경로: $WEBHOOK_URL"
            exit 1
          else
            echo "✅ 서버 연결 성공 (HTTP $HTTP_CODE)"
          fi
      
      - name: 📊 사전 진단 결과
        run: |
          echo "## 🔍 사전 진단 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 환경 변수 | ✅ 정상 |" >> $GITHUB_STEP_SUMMARY
          echo "| 서버 연결 | ✅ 정상 |" >> $GITHUB_STEP_SUMMARY
          echo "| 실행 가능 | ✅ 예 |" >> $GITHUB_STEP_SUMMARY

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🚀 메인 동기화 작업: MFDS 데이터 수집
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  sync_mfds:
    name: 🚀 MFDS 데이터 동기화
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.can_proceed == 'true'
    timeout-minutes: 60  # 최대 1시간
    
    steps:
      - name: 🎬 동기화 시작
        id: start_sync
        run: |
          echo "🎬 MFDS 식약처 데이터 수집을 시작합니다..."
          echo "📅 실행 시각: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🔧 실행 모드: ${{ github.event_name }}"
          
          # Webhook URL 구성
          BASE_URL="${{ env.CAFE24_WEBHOOK_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          WEBHOOK_URL="${BASE_DIR}/data_sync_webhook.php"
          
          echo "WEBHOOK_URL=${WEBHOOK_URL}" >> $GITHUB_OUTPUT
      
      - name: 📡 Webhook 호출 (MFDS 동기화 트리거)
        id: trigger
        run: |
          WEBHOOK_URL="${{ steps.start_sync.outputs.WEBHOOK_URL }}"
          
          # URL 파라미터 구성
          # type=mfds: MFDS 데이터 수집 지정
          # source=github: GitHub Actions에서 실행됨을 표시 (session_id 자동 설정)
          FULL_URL="${WEBHOOK_URL}?type=mfds&source=github&token=${{ env.SYNC_TOKEN }}"
          
          echo "📡 Webhook 호출 중..."
          echo "🔗 URL: ${WEBHOOK_URL}?type=mfds&source=github"
          
          # POST 요청으로 동기화 트리거
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            -w "\n%{http_code}" \
            -s \
            --max-time 300 \
            "$FULL_URL")
          
          # HTTP 상태 코드 추출
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "📥 응답 코드: $HTTP_CODE"
          echo "📄 응답 내용: $BODY"
          
          # 응답 저장
          echo "$BODY" > response.json
          
          # 결과 검증
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Webhook 호출 실패 (HTTP $HTTP_CODE)"
            exit 1
          fi
          
          # JSON 파싱 (success 필드 확인)
          SUCCESS=$(echo "$BODY" | jq -r '.success // false')
          
          if [ "$SUCCESS" != "true" ]; then
            echo "❌ 동기화 실패"
            MESSAGE=$(echo "$BODY" | jq -r '.message // "알 수 없는 오류"')
            echo "오류 메시지: $MESSAGE"
            exit 1
          fi
          
          echo "✅ Webhook 호출 성공"
      
      - name: ⏳ 동기화 진행 대기 (5분)
        run: |
          echo "⏳ MFDS API 수집이 진행 중입니다. 5분 대기..."
          echo "💡 api_fetch.php가 백그라운드에서 실행 중입니다."
          
          # 5분 대기 (MFDS API는 전체 수집에 약 3-5분 소요)
          sleep 300
          
          echo "✅ 대기 완료"
      
      - name: 📊 동기화 결과 확인
        id: check_result
        run: |
          BASE_URL="${{ env.CAFE24_WEBHOOK_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          # monitor_api.php를 통해 통계 확인
          STATS_URL="${BASE_DIR}/monitor_api.php?action=statistics"
          
          echo "📊 동기화 결과 조회 중..."
          STATS=$(curl -s "$STATS_URL")
          
          echo "📄 통계 데이터:"
          echo "$STATS" | jq '.'
          
          # MFDS 통계 추출
          MFDS_TOTAL=$(echo "$STATS" | jq -r '.data.mfds.total // 0')
          MFDS_LAST_FETCH=$(echo "$STATS" | jq -r '.data.mfds.last_fetch.date // "없음"')
          MFDS_STATUS=$(echo "$STATS" | jq -r '.data.mfds.last_fetch.status // "알 수 없음"')
          
          echo "MFDS_TOTAL=${MFDS_TOTAL}" >> $GITHUB_OUTPUT
          echo "MFDS_LAST_FETCH=${MFDS_LAST_FETCH}" >> $GITHUB_OUTPUT
          echo "MFDS_STATUS=${MFDS_STATUS}" >> $GITHUB_OUTPUT
          
          echo "✅ 결과 확인 완료"
      
      - name: 📋 최종 결과 요약
        run: |
          echo "## 🎉 MFDS 동기화 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 수집 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 전체 성분 수 | ${{ steps.check_result.outputs.MFDS_TOTAL }}개 |" >> $GITHUB_STEP_SUMMARY
          echo "| 마지막 수집 | ${{ steps.check_result.outputs.MFDS_LAST_FETCH }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 상태 | ${{ steps.check_result.outputs.MFDS_STATUS }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 실행 정보" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 시각**: $(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 방식**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **데이터 소스**: 식약처 화장품원료 정보 API" >> $GITHUB_STEP_SUMMARY
          
          # 상태에 따른 최종 메시지
          if [ "${{ steps.check_result.outputs.MFDS_STATUS }}" == "SUCCESS" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **동기화 성공!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️  **동기화 상태 확인 필요**" >> $GITHUB_STEP_SUMMARY
          fi

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # ❌ 실패 처리
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  on_failure:
    name: ❌ 실패 처리
    runs-on: ubuntu-latest
    needs: [preflight, sync_mfds]
    if: failure()
    
    steps:
      - name: 📧 실패 알림
        run: |
          echo "## ❌ MFDS 동기화 실패" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "동기화 작업이 실패했습니다." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 확인 사항" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. GitHub Secrets 설정 확인 (CAFE24_SYNC_URL, SYNC_ACTION_TOKEN)" >> $GITHUB_STEP_SUMMARY
          echo "2. data_sync_webhook.php 파일 존재 확인" >> $GITHUB_STEP_SUMMARY
          echo "3. 식약처 API 상태 확인" >> $GITHUB_STEP_SUMMARY
          echo "4. 서버 로그 확인 (api_fetch_logs 테이블)" >> $GITHUB_STEP_SUMMARY