name: RAG Knowledge Base Sync (Optimized & Stable)

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📌 최적화 설정 요약
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ✅ 배치 크기: 100건 (Supabase timeout 방지)
# ✅ 워커 수: 2개 (API rate limit 준수)
# ✅ 타임아웃: 180분 (충분한 처리 시간)
# ✅ 대기 시간: 3초 (API 부하 분산)
# ✅ 증분 동기화: skip-synced=1 (중복 방지)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

on:
  schedule:
    # 매일 오후 11시 55분(한국시간) 실행
    # 한국시간(KST) = UTC + 9시간
    # 23:55 KST = 14:55 UTC
    - cron: '55 14 * * *'
  
  # 수동 실행 옵션
  workflow_dispatch:
    inputs:
      batch_size:
        description: '배치 크기 (권장: 100)'
        required: false
        default: '100'
      parallel_workers:
        description: '워커 수 (권장: 2, 최대: 4)'
        required: false
        default: '2'
      since:
        description: '동기화 시작 날짜 (예: 2025-01-01)'
        required: false
        default: ''

env:
  WEBHOOK_URL: ${{ secrets.CAFE24_SYNC_URL }}
  SYNC_TOKEN: ${{ secrets.SYNC_TOKEN }}
  BATCH_SIZE: ${{ github.event.inputs.batch_size || '100' }}
  PARALLEL_WORKERS: ${{ github.event.inputs.parallel_workers || '2' }}
  SINCE: ${{ github.event.inputs.since || '' }}
  MAX_ITERATIONS: 300
  SLEEP_SECONDS: 3

jobs:
  pre-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📋 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Server Diagnostic
        id: diag
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 서버 환경 진단 시작"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          DIAG_URL="${WEBHOOK_URL}/sync_webhook.php?diag=1&t=${SYNC_TOKEN}"
          
          RESPONSE=$(curl -sS -w "\n%{http_code}" "$DIAG_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "$BODY" | jq '.' || echo "$BODY"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "::error::진단 실패: HTTP $HTTP_CODE"
            exit 1
          fi
          
          TOKEN_OK=$(echo "$BODY" | jq -r '.token_match // false')
          
          echo "::notice::✅ 토큰 검증: $TOKEN_OK"
          
          if [ "$TOKEN_OK" != "true" ]; then
            echo "::error::토큰 불일치"
            exit 1
          fi

      - name: 📊 Diagnostic Summary
        run: |
          echo "## 🔍 사전 진단 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 토큰 검증 | ✅ 통과 |" >> $GITHUB_STEP_SUMMARY
          echo "| 서버 연결 | ✅ 정상 |" >> $GITHUB_STEP_SUMMARY
          echo "| 배치 크기 | ${{ env.BATCH_SIZE }}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| 워커 수 | ${{ env.PARALLEL_WORKERS }}개 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  sync:
    needs: pre-check
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    strategy:
      matrix:
        worker: [0, 1]
      fail-fast: false
      max-parallel: 2
    
    outputs:
      worker_0_processed: ${{ steps.sync_0.outputs.total_processed }}
      worker_0_upserted: ${{ steps.sync_0.outputs.total_upserted }}
      worker_1_processed: ${{ steps.sync_1.outputs.total_processed }}
      worker_1_upserted: ${{ steps.sync_1.outputs.total_upserted }}
    
    steps:
      - name: 📋 Checkout
        uses: actions/checkout@v4

      - name: 🔄 Parallel Sync (Worker ${{ matrix.worker }})
        id: sync_${{ matrix.worker }}
        run: |
          WORKER_ID=${{ matrix.worker }}
          TOTAL_WORKERS=${{ env.PARALLEL_WORKERS }}
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 워커 #${WORKER_ID} 시작"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          OFFSET=$((BATCH_SIZE * WORKER_ID))
          TOTAL_PROCESSED=0
          TOTAL_UPSERTED=0
          ITERATION=0
          HAS_MORE="true"
          
          while [ "$HAS_MORE" = "true" ] && [ $ITERATION -lt $MAX_ITERATIONS ]; do
            ITERATION=$((ITERATION + 1))
            
            echo "📦 워커 #${WORKER_ID} - 배치 #${ITERATION} (offset=${OFFSET})"
            
            SYNC_URL="${WEBHOOK_URL}/sync_webhook.php"
            PARAMS="t=${SYNC_TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&async=0"
            
            if [ -n "$SINCE" ]; then
              PARAMS="${PARAMS}&s=${SINCE}"
            fi
            
            RESPONSE=$(curl -sS -w "\n%{http_code}" --max-time 300 "${SYNC_URL}?${PARAMS}")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_CODE"
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "::error::워커 #${WORKER_ID} 배치 실패"
              break
            fi
            
            PROCESSED=$(echo "$BODY" | jq -r '.batch.processed // 0')
            UPSERTED=$(echo "$BODY" | jq -r '.batch.upserted // 0')
            HAS_MORE=$(echo "$BODY" | jq -r '.config.has_more // false')
            
            TOTAL_PROCESSED=$((TOTAL_PROCESSED + PROCESSED))
            TOTAL_UPSERTED=$((TOTAL_UPSERTED + UPSERTED))
            
            echo "✅ 처리: ${PROCESSED}건, 업로드: ${UPSERTED}건"
            echo "📊 누적: 처리 ${TOTAL_PROCESSED}건, 업로드 ${TOTAL_UPSERTED}건"
            
            OFFSET=$((OFFSET + BATCH_SIZE * TOTAL_WORKERS))
            
            if [ "$HAS_MORE" != "true" ]; then
              echo "🎉 워커 #${WORKER_ID} 완료"
              break
            fi
            
            sleep $SLEEP_SECONDS
          done
          
          echo "total_processed=$TOTAL_PROCESSED" >> $GITHUB_OUTPUT
          echo "total_upserted=$TOTAL_UPSERTED" >> $GITHUB_OUTPUT
          echo "iterations=$ITERATION" >> $GITHUB_OUTPUT

      - name: 📊 Worker Summary
        if: always()
        run: |
          echo "## 🔄 워커 #${{ matrix.worker }} 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 워커 ID | ${{ matrix.worker }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 배치 수 | ${{ steps.sync_${{ matrix.worker }}.outputs.iterations || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 처리 건수 | ${{ steps.sync_${{ matrix.worker }}.outputs.total_processed || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 업로드 건수 | ${{ steps.sync_${{ matrix.worker }}.outputs.total_upserted || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  summary:
    needs: sync
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Get Final Statistics
        id: stats
        run: |
          echo "📊 전체 동기화 통계 조회 중..."
          
          STATS_URL="${{ secrets.CAFE24_SYNC_URL }}/sync_stats.php?t=${{ secrets.SYNC_TOKEN }}"
          
          RESPONSE=$(curl -sS -w "\n%{http_code}" "$STATS_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "$BODY" | jq '.' || echo "$BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            MYSQL_TOTAL=$(echo "$BODY" | jq -r '.mysql_total // 0')
            SUPABASE_SYNCED=$(echo "$BODY" | jq -r '.supabase_synced // 0')
            SYNC_RATE=$(echo "$BODY" | jq -r '.sync_rate // 0')
            REMAINING=$(echo "$BODY" | jq -r '.remaining // 0')
            
            echo "mysql_total=$MYSQL_TOTAL" >> $GITHUB_OUTPUT
            echo "supabase_synced=$SUPABASE_SYNCED" >> $GITHUB_OUTPUT
            echo "sync_rate=$SYNC_RATE" >> $GITHUB_OUTPUT
            echo "remaining=$REMAINING" >> $GITHUB_OUTPUT
          else
            echo "::warning::통계 조회 실패"
            echo "mysql_total=0" >> $GITHUB_OUTPUT
            echo "supabase_synced=0" >> $GITHUB_OUTPUT
            echo "sync_rate=0" >> $GITHUB_OUTPUT
            echo "remaining=0" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Final Summary
        run: |
          echo "## 🎉 전체 동기화 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 실행 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **워커 수**: ${{ env.PARALLEL_WORKERS }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **배치 크기**: ${{ env.BATCH_SIZE }}건" >> $GITHUB_STEP_SUMMARY
          echo "- **완료 시간**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 전체 동기화 현황" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 레코드 | ${{ steps.stats.outputs.mysql_total }}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 완료 | ${{ steps.stats.outputs.supabase_synced }}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${{ steps.stats.outputs.sync_rate }}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${{ steps.stats.outputs.remaining }}건 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📌 참고사항" >> $GITHUB_STEP_SUMMARY
          echo "- 중복 체크는 (infodata_id, content) 기준으로 수행됩니다" >> $GITHUB_STEP_SUMMARY
          echo "- 남은 데이터가 있으면 워크플로우를 재실행하세요" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 유용한 링크" >> $GITHUB_STEP_SUMMARY
          echo "- [Supabase 대시보드](https://supabase.com/dashboard)" >> $GITHUB_STEP_SUMMARY
          echo "- [동기화 로그](https://biplex.mycafe24.com/logs/sync_to_supabase.log)" >> $GITHUB_STEP_SUMMARY
          
