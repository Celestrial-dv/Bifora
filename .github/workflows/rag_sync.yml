name: RAG Sync (Cafe24 → Supabase)

on:
  workflow_dispatch:
    inputs:
      mode:  { description: 'full | incremental', required: false, default: 'full' }
      since: { description: 'YYYY-MM-DD (optional)', required: false, default: '' }
      async: { description: '1=background,0=sync', required: false, default: '0' }  # 먼저 동기

  schedule:
    - cron: '0 17 * * *'   # 02:00 KST

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Check secrets
        run: |
          [ -n "${{ secrets.CAFE24_SYNC_URL }}" ] || (echo "CAFE24_SYNC_URL missing" && exit 1)
          [ -n "${{ secrets.SYNC_TOKEN }}" ] || (echo "SYNC_TOKEN missing" && exit 1)

      - name: 0) URL normalize & assert path
        env:
          URL_RAW: ${{ secrets.CAFE24_SYNC_URL }}
        run: |
          URL_CLEAN=$(printf '%s' "$URL_RAW" | tr -d '\r' | sed -e 's/[[:space:]]\+$//' -e 's:/*$::')
          if [ -z "$URL_CLEAN" ]; then echo "Empty CAFE24_SYNC_URL"; exit 1; fi
          echo "URL_CLEAN=$URL_CLEAN"
          BASE=$(basename "$URL_CLEAN")
          echo "BASENAME=$BASE"
          if [ "$BASE" != "sync_webhook.php" ]; then
            echo "Path must end with sync_webhook.php (current: $BASE)"; exit 1
          fi
          echo "URL_CLEAN=$URL_CLEAN" >> $GITHUB_ENV

      - name: 1) SYNC (GET with query)
        env:
          URL:    ${{ env.URL_CLEAN }}
          TOKEN:  ${{ secrets.SYNC_TOKEN }}
          MODE:   ${{ github.event.inputs.mode  || 'full' }}
          SINCE:  ${{ github.event.inputs.since || '' }}
          ASYNC_: ${{ github.event.inputs.async || '0' }}
        run: |
          echo "GET $URL (webhook)"
          # Build query args without altering variable names
          CURL_ARGS=(
            -G "$URL"
            --data-urlencode "t=$TOKEN"
            --data-urlencode "m=$MODE"
            --data-urlencode "async=$ASYNC_"
            -H "Accept: application/json"
            -D headers.txt -o body.txt -w "%{http_code}"
          )
          if [ -n "$SINCE" ]; then
            CURL_ARGS+=( --data-urlencode "s=$SINCE" )
          fi
          CODE=$(curl -sS "${CURL_ARGS[@]}" || true)
          echo "HTTP_CODE=$CODE"
          echo "----- SYNC headers -----"; cat headers.txt || true
          echo "----- SYNC body -----";    cat body.txt    || true
          if [ "$CODE" != "200" ] && [ "$CODE" != "202" ]; then
            echo "Sync failed"; exit 1
          fi

      - name: 1.1) DIAG on failure (same endpoint + diag=1)
        if: failure()
        env:
          URL:    ${{ env.URL_CLEAN }}
          TOKEN:  ${{ secrets.SYNC_TOKEN }}
          MODE:   ${{ github.event.inputs.mode  || 'full' }}
          SINCE:  ${{ github.event.inputs.since || '' }}
          ASYNC_: ${{ github.event.inputs.async || '0' }}
        run: |
          echo "GET $URL (diag)"
          CURL_ARGS=(
            -G "$URL"
            --data-urlencode "t=$TOKEN"
            --data-urlencode "m=$MODE"
            --data-urlencode "async=$ASYNC_"
            --data-urlencode "diag=1"
            -H "Accept: application/json"
            -D diag_headers.txt -o diag_body.txt -w "HTTP_CODE=%{http_code}"
          )
          if [ -n "$SINCE" ]; then
            CURL_ARGS+=( --data-urlencode "s=$SINCE" )
          fi
          curl -sS "${CURL_ARGS[@]}"
          echo ""; echo "----- DIAG headers -----"; cat diag_headers.txt || true
          echo "----- DIAG body -----";    cat diag_body.txt    || true
          
