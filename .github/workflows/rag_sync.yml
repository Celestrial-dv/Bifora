name: RAG Knowledge Base Sync

on:
  schedule:
    # 매일 오전 3시(KST 기준 - UTC 18:00) 실행
    - cron: '0 18 * * *'
  
  workflow_dispatch:
    inputs:
      batch_size:
        description: '배치 크기 (한 번에 처리할 행 수)'
        required: false
        default: '100'
      since:
        description: '동기화 시작 날짜 (YYYY-MM-DD)'
        required: false
        default: ''

env:
  WEBHOOK_URL: ${{ secrets.CAFE24_SYNC_URL }}
  SYNC_TOKEN: ${{ secrets.SYNC_TOKEN }}
  BATCH_SIZE: ${{ github.event.inputs.batch_size || '100' }}
  SINCE: ${{ github.event.inputs.since || '' }}
  MAX_ITERATIONS: 1000  # 최대 반복 횟수 (100 * 1000 = 100,000행)
  SLEEP_SECONDS: 2      # API Rate Limit 방지

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2시간 타임아웃
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Diagnostic Check
        id: diag
        run: |
          echo "🔍 환경 진단 중..."
          
          DIAG_URL="${WEBHOOK_URL}/sync_webhook.php?diag=1&t=${SYNC_TOKEN}"
          
          RESPONSE=$(curl -sS -w "\n%{http_code}" "$DIAG_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "$BODY" | jq '.' || echo "$BODY"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "::error::진단 실패: HTTP $HTTP_CODE"
            exit 1
          fi
          
          # 토큰 검증 확인
          TOKEN_OK=$(echo "$BODY" | jq -r '.token_match // false')
          if [ "$TOKEN_OK" != "true" ]; then
            echo "::error::토큰 불일치"
            exit 1
          fi
          
          echo "::notice::진단 완료 ✅"

      - name: 🔄 Batch Sync Loop
        id: sync
        run: |
          echo "🔄 배치 동기화 시작..."
          echo "배치 크기: $BATCH_SIZE"
          echo "시작 날짜: ${SINCE:-'전체'}"
          
          OFFSET=0
          TOTAL_PROCESSED=0
          TOTAL_UPSERTED=0
          ITERATION=0
          HAS_MORE="true"
          
          while [ "$HAS_MORE" = "true" ] && [ $ITERATION -lt $MAX_ITERATIONS ]; do
            ITERATION=$((ITERATION + 1))
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📦 배치 #${ITERATION}: offset=${OFFSET}, batch=${BATCH_SIZE}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # 동기화 요청
            SYNC_URL="${WEBHOOK_URL}/sync_webhook.php"
            PARAMS="t=${SYNC_TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&async=0"
            
            if [ -n "$SINCE" ]; then
              PARAMS="${PARAMS}&s=${SINCE}"
            fi
            
            FULL_URL="${SYNC_URL}?${PARAMS}"
            
            RESPONSE=$(curl -sS -w "\n%{http_code}" --max-time 300 "$FULL_URL")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "HTTP Status: $HTTP_CODE"
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "::warning::배치 #${ITERATION} 실패 (HTTP $HTTP_CODE)"
              echo "$BODY"
              
              # 3회 연속 실패 시 중단
              if [ $ITERATION -ge 3 ]; then
                echo "::error::연속 실패로 중단"
                exit 1
              fi
              
              # 재시도 전 대기
              sleep $((SLEEP_SECONDS * 2))
              continue
            fi
            
            # JSON 파싱
            PROCESSED=$(echo "$BODY" | jq -r '.processed // 0')
            UPSERTED=$(echo "$BODY" | jq -r '.upserted // 0')
            HAS_MORE=$(echo "$BODY" | jq -r '.has_more // false')
            
            TOTAL_PROCESSED=$((TOTAL_PROCESSED + PROCESSED))
            TOTAL_UPSERTED=$((TOTAL_UPSERTED + UPSERTED))
            
            echo "✅ 처리: ${PROCESSED}건, 업로드: ${UPSERTED}건"
            echo "📊 누적: 처리=${TOTAL_PROCESSED}, 업로드=${TOTAL_UPSERTED}"
            echo "🔄 다음 배치: $([ "$HAS_MORE" = "true" ] && echo "있음" || echo "없음")"
            
            # 다음 오프셋
            OFFSET=$((OFFSET + BATCH_SIZE))
            
            # 더 이상 데이터 없으면 종료
            if [ "$HAS_MORE" != "true" ]; then
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "🎉 동기화 완료!"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "총 배치 수: ${ITERATION}"
              echo "총 처리: ${TOTAL_PROCESSED}건"
              echo "총 업로드: ${TOTAL_UPSERTED}건"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              break
            fi
            
            # Rate Limit 방지
            sleep $SLEEP_SECONDS
          done
          
          if [ $ITERATION -ge $MAX_ITERATIONS ]; then
            echo "::warning::최대 반복 횟수(${MAX_ITERATIONS}) 도달"
          fi
          
          # GitHub Actions 출력
          echo "total_processed=$TOTAL_PROCESSED" >> $GITHUB_OUTPUT
          echo "total_upserted=$TOTAL_UPSERTED" >> $GITHUB_OUTPUT
          echo "iterations=$ITERATION" >> $GITHUB_OUTPUT

      - name: 📊 Summary
        if: always()
        run: |
          echo "## 🔄 RAG 동기화 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 총 배치 수 | ${{ steps.sync.outputs.iterations || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 총 처리 건수 | ${{ steps.sync.outputs.total_processed || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 총 업로드 건수 | ${{ steps.sync.outputs.total_upserted || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 배치 크기 | ${BATCH_SIZE} |" >> $GITHUB_STEP_SUMMARY
          echo "| 시작 날짜 | ${SINCE:-'전체'} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ 작업 완료 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Notify on Failure
        if: failure()
        run: |
          echo "::error::RAG 동기화 실패"
          echo "::error::로그를 확인하세요: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
