name: RAG Knowledge Base Sync (Optimized & Stable)

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📌 최적화 설정 요약
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ✅ 배치 크기: 100건 (Supabase timeout 방지)
# ✅ 워커 수: 2개 (API rate limit 준수)
# ✅ 타임아웃: 180분 (충분한 처리 시간)
# ✅ 대기 시간: 3초 (API 부하 분산)
# ✅ 증분 동기화: skip-synced=1 (중복 방지)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

on:
  schedule:
    # 매일 오후 11시 55분(한국시간) 실행
    # 한국시간(KST) = UTC + 9시간
    # 23:55 KST = 14:55 UTC
    - cron: '55 14 * * *'
  
  # 수동 실행 옵션
  workflow_dispatch:
    inputs:
      batch_size:
        description: '배치 크기 (기본값: 100)'
        required: false
        default: '100'
      max_batches:
        description: '최대 배치 수 (기본값: 1000, 0=무제한)'
        required: false
        default: '1000'

env:
  CAFE24_SYNC_URL: ${{ secrets.CAFE24_SYNC_URL }}
  SYNC_TOKEN: ${{ secrets.SYNC_TOKEN }}

jobs:
  preflight:
    name: 🔍 사전 진단
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
      mysql_total: ${{ steps.stats.outputs.mysql_total }}
      supabase_synced: ${{ steps.stats.outputs.supabase_synced }}
      remaining: ${{ steps.stats.outputs.remaining }}
      
    steps:
      - name: 🔐 토큰 검증
        id: check
        run: |
          if [ -z "${{ env.SYNC_TOKEN }}" ]; then
            echo "❌ SYNC_TOKEN이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          DIAG_URL="${{ env.CAFE24_SYNC_URL }}/api/rag/sync_webhook.php?t=${{ env.SYNC_TOKEN }}&diag=1"
          
          RESPONSE=$(curl -s -w "\n%{http_code}" "$DIAG_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ 서버 연결 실패: HTTP $HTTP_CODE"
            echo "$BODY"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 토큰 검증 성공"
          echo "$BODY" | jq '.'
          echo "can_proceed=true" >> $GITHUB_OUTPUT
      
      - name: 📊 현재 통계 조회
        id: stats
        if: steps.check.outputs.can_proceed == 'true'
        run: |
          STATS_URL="${{ env.CAFE24_SYNC_URL }}/api/rag/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          RESPONSE=$(curl -s "$STATS_URL")
          
          echo "$RESPONSE" | jq '.'
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          echo "mysql_total=$MYSQL_TOTAL" >> $GITHUB_OUTPUT
          echo "supabase_synced=$SUPABASE_SYNCED" >> $GITHUB_OUTPUT
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT

  sync:
    name: 🔄 전체 동기화
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.can_proceed == 'true' && needs.preflight.outputs.remaining > 0
    timeout-minutes: 180
    
    steps:
      - name: 🚀 순차 배치 동기화
        env:
          BATCH_SIZE: ${{ github.event.inputs.batch_size || '100' }}
          MAX_BATCHES: ${{ github.event.inputs.max_batches || '1000' }}
        run: |
          echo "🔧 동기화 설정:"
          echo "  - 배치 크기: $BATCH_SIZE"
          echo "  - 최대 배치: $MAX_BATCHES"
          
          OFFSET=0
          TOTAL_PROCESSED=0
          TOTAL_UPSERTED=0
          BATCH_COUNT=0
          
          while true; do
            BATCH_COUNT=$((BATCH_COUNT + 1))
            
            # 최대 배치 수 체크
            if [ "$MAX_BATCHES" != "0" ] && [ "$BATCH_COUNT" -gt "$MAX_BATCHES" ]; then
              echo "⏸️ 최대 배치 수($MAX_BATCHES) 도달"
              break
            fi
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📦 배치 #$BATCH_COUNT (오프셋: $OFFSET)"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            REQUEST_URL="${{ env.CAFE24_SYNC_URL }}/api/rag/sync_webhook.php?t=${{ env.SYNC_TOKEN }}&batch=${BATCH_SIZE}&offset=${OFFSET}"
            
            RESPONSE=$(curl -s -w "\n%{http_code}" "$REQUEST_URL")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "⚠️ 배치 실패: HTTP $HTTP_CODE"
              echo "$BODY"
              break
            fi
            
            # JSON 파싱
            BATCH_PROCESSED=$(echo "$BODY" | jq -r '.batch.processed // 0')
            BATCH_UPSERTED=$(echo "$BODY" | jq -r '.batch.upserted // 0')
            HAS_MORE=$(echo "$BODY" | jq -r '.config.has_more // false')
            
            echo "  처리: ${BATCH_PROCESSED}건"
            echo "  업로드: ${BATCH_UPSERTED}건"
            echo "  더 있음: ${HAS_MORE}"
            
            TOTAL_PROCESSED=$((TOTAL_PROCESSED + BATCH_PROCESSED))
            TOTAL_UPSERTED=$((TOTAL_UPSERTED + BATCH_UPSERTED))
            
            # 다음 오프셋
            OFFSET=$((OFFSET + BATCH_SIZE))
            
            # ✅ 종료 조건: has_more가 false이거나 처리된 건수가 0
            if [ "$HAS_MORE" = "false" ] || [ "$BATCH_PROCESSED" = "0" ]; then
              echo "✅ 전체 동기화 완료"
              break
            fi
            
            # Rate limit 방지
            sleep 2
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 최종 결과"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "총 배치: $BATCH_COUNT"
          echo "총 처리: $TOTAL_PROCESSED건"
          echo "총 업로드: $TOTAL_UPSERTED건"
          
          echo "### 📊 동기화 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| 총 배치 | ${BATCH_COUNT} |" >> $GITHUB_STEP_SUMMARY
          echo "| 총 처리 | ${TOTAL_PROCESSED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| 총 업로드 | ${TOTAL_UPSERTED}건 |" >> $GITHUB_STEP_SUMMARY

  finalize:
    name: 📊 최종 통계
    runs-on: ubuntu-latest
    needs: [preflight, sync]
    if: always() && needs.preflight.outputs.can_proceed == 'true'
    
    steps:
      - name: 📊 최종 통계 조회
        run: |
          STATS_URL="${{ env.CAFE24_SYNC_URL }}/api/rag/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          RESPONSE=$(curl -s "$STATS_URL")
          
          echo "$RESPONSE" | jq '.'
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          echo "### 🌐 최종 동기화 현황" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 | ${MYSQL_TOTAL}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 | ${SUPABASE_SYNCED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${SYNC_RATE}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${REMAINING}건 |" >> $GITHUB_STEP_SUMMARY

          
