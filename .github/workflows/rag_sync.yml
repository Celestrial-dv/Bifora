name: RAG Knowledge Base Sync (Optimized & Stable)

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📌 최적화 설정 요약
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ✅ 배치 크기: 100건 (Supabase timeout 방지)
# ✅ 워커 수: 2개 (API rate limit 준수)
# ✅ 타임아웃: 180분 (충분한 처리 시간)
# ✅ 대기 시간: 3초 (API 부하 분산)
# ✅ 증분 동기화: skip-synced=1 (중복 방지)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

on:
  schedule:
    # 매일 오후 11시 55분(한국시간) 실행
    # 한국시간(KST) = UTC + 9시간
    # 23:55 KST = 14:55 UTC
    - cron: '55 14 * * *'
  
  # 수동 실행 옵션
  workflow_dispatch:
    inputs:
      batch_size:
        description: '배치 크기 (기본값: 50)'
        required: false
        default: '50'
      workers:
        description: '워커 수 (기본값: 2)'
        required: false
        default: '2'
      max_iterations:
        description: '워커당 최대 반복 횟수 (기본값: 500)'
        required: false
        default: '500'

env:
  CAFE24_SYNC_URL: ${{ secrets.CAFE24_SYNC_URL }}
  SYNC_TOKEN: ${{ secrets.SYNC_TOKEN }}

jobs:
  preflight:
    name: 🔍 사전 진단
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
      mysql_total: ${{ steps.stats.outputs.mysql_total }}
      supabase_synced: ${{ steps.stats.outputs.supabase_synced }}
      remaining: ${{ steps.stats.outputs.remaining }}
      
    steps:
      - name: 🔐 토큰 검증
        id: check
        run: |
          if [ -z "${{ env.SYNC_TOKEN }}" ]; then
            echo "❌ SYNC_TOKEN이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          
          if [[ "$BASE_URL" == *"?"* ]]; then
            DIAG_URL="${BASE_URL}&t=${{ env.SYNC_TOKEN }}&diag=1"
          else
            DIAG_URL="${BASE_URL}?t=${{ env.SYNC_TOKEN }}&diag=1"
          fi
          
          echo "🔗 진단 URL: ${DIAG_URL%\&t=*}&t=***"
          
          RESPONSE=$(curl -s -w "\n%{http_code}" "$DIAG_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ 서버 연결 실패: HTTP $HTTP_CODE"
            echo "$BODY"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 토큰 검증 성공"
          echo "$BODY" | jq '.'
          echo "can_proceed=true" >> $GITHUB_OUTPUT
      
      - name: 📊 현재 통계 조회
        id: stats
        if: steps.check.outputs.can_proceed == 'true'
        run: |
          echo "📊 Supabase 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          echo "🔗 통계 URL: ${STATS_URL%\?t=*}?t=***"
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          echo "응답:"
          echo "$RESPONSE" | jq '.'
          
          ERROR=$(echo "$RESPONSE" | jq -r '.error // empty')
          if [ -n "$ERROR" ]; then
            echo "❌ 통계 조회 실패: $ERROR"
            exit 1
          fi
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          echo "mysql_total=$MYSQL_TOTAL" >> $GITHUB_OUTPUT
          echo "supabase_synced=$SUPABASE_SYNCED" >> $GITHUB_OUTPUT
          echo "sync_rate=$SYNC_RATE" >> $GITHUB_OUTPUT
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT
          
          echo "### 📊 현재 통계" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 | ${MYSQL_TOTAL}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 | ${SUPABASE_SYNCED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${SYNC_RATE}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${REMAINING}건 |" >> $GITHUB_STEP_SUMMARY

  sync:
    name: 🔄 워커 ${{ matrix.worker_id }}
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.can_proceed == 'true' && needs.preflight.outputs.remaining > 0
    timeout-minutes: 480  # ⚡ 8시간 (충분한 시간 확보)
    
    strategy:
      max-parallel: 2
      matrix:
        worker_id: [0, 1]
    
    steps:
      - name: 🚀 반복 배치 동기화 실행
        id: sync_batches
        env:
          BATCH_SIZE: ${{ github.event.inputs.batch_size || '50' }}
          WORKER_ID: ${{ matrix.worker_id }}
          MAX_ITERATIONS: ${{ github.event.inputs.max_iterations || '500' }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔧 워커 설정 (v2.0):"
          echo "  - 워커 ID: $WORKER_ID"
          echo "  - 배치 크기: $BATCH_SIZE"
          echo "  - 최대 반복: $MAX_ITERATIONS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          TOKEN="${{ env.SYNC_TOKEN }}"
          
          OFFSET=$((WORKER_ID * BATCH_SIZE))
          
          TOTAL_PROCESSED=0
          TOTAL_UPSERTED=0
          TOTAL_DUPLICATE_SKIPPED=0
          ITERATION=0
          
          while [ $ITERATION -lt $MAX_ITERATIONS ]; do
            ITERATION=$((ITERATION + 1))
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📦 워커 #${WORKER_ID} - 반복 #${ITERATION}"
            echo "   오프셋: $OFFSET"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # ⚡ 중복 방지 추가
            if [[ "$BASE_URL" == *"?"* ]]; then
              REQUEST_URL="${BASE_URL}&t=${TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=1"
            else
              REQUEST_URL="${BASE_URL}?t=${TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=1"
            fi
            
            MASKED_URL="${REQUEST_URL%\&t=*}&t=***&${REQUEST_URL##*\&batch=}"
            echo "🔗 요청 URL: $MASKED_URL"
            
            RESPONSE=$(curl -s -w "\n%{http_code}" "$REQUEST_URL")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "⚠️ 배치 실패: HTTP $HTTP_CODE"
              echo "$BODY"
              
              if echo "$BODY" | grep -q "TOKEN_REQUIRED\|INVALID_TOKEN\|Invalid token"; then
                echo "❌ 토큰 오류 감지, 워커 종료"
                exit 1
              fi
              
              break
            fi
            
            BATCH_PROCESSED=$(echo "$BODY" | jq -r '.batch.processed // 0')
            BATCH_UPSERTED=$(echo "$BODY" | jq -r '.batch.upserted // 0')
            BATCH_DUPLICATE=$(echo "$BODY" | jq -r '.batch.duplicate_skipped // 0')
            HAS_MORE=$(echo "$BODY" | jq -r '.config.has_more // false')
            
            MYSQL_TOTAL=$(echo "$BODY" | jq -r '.overall.mysql_total // 0')
            SUPABASE_SYNCED=$(echo "$BODY" | jq -r '.overall.supabase_synced // 0')
            SYNC_RATE=$(echo "$BODY" | jq -r '.overall.sync_rate // 0')
            REMAINING=$(echo "$BODY" | jq -r '.overall.remaining // 0')
            
            echo "  ✅ 처리: ${BATCH_PROCESSED}건"
            echo "  ✅ 업로드: ${BATCH_UPSERTED}건"
            echo "  ⏭️ 중복: ${BATCH_DUPLICATE}건"
            echo "  📊 전체: MySQL ${MYSQL_TOTAL} | Supabase ${SUPABASE_SYNCED} (${SYNC_RATE}%)"
            echo "  📉 남은 데이터: ${REMAINING}건"
            
            TOTAL_PROCESSED=$((TOTAL_PROCESSED + BATCH_PROCESSED))
            TOTAL_UPSERTED=$((TOTAL_UPSERTED + BATCH_UPSERTED))
            TOTAL_DUPLICATE_SKIPPED=$((TOTAL_DUPLICATE_SKIPPED + BATCH_DUPLICATE))
            
            OFFSET=$((OFFSET + BATCH_SIZE * 2))
            
            if [ "$HAS_MORE" = "false" ]; then
              echo "✅ has_more=false 감지, 워커 종료"
              break
            fi
            
            if [ "$BATCH_PROCESSED" -eq 0 ]; then
              echo "✅ processed=0 감지, 워커 종료"
              break
            fi
            
            # ⚡ 대기 시간 증가 (Timeout 방지)
            sleep 5
          done
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 워커 #${WORKER_ID} 완료"
          echo "  - 총 반복: ${ITERATION}회"
          echo "  - 총 처리: ${TOTAL_PROCESSED}건"
          echo "  - 총 업로드: ${TOTAL_UPSERTED}건"
          echo "  - 총 중복: ${TOTAL_DUPLICATE_SKIPPED}건"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          echo "total_processed=$TOTAL_PROCESSED" >> $GITHUB_OUTPUT
          echo "total_upserted=$TOTAL_UPSERTED" >> $GITHUB_OUTPUT
          echo "total_duplicate=$TOTAL_DUPLICATE_SKIPPED" >> $GITHUB_OUTPUT
          echo "iterations=$ITERATION" >> $GITHUB_OUTPUT
      
      - name: 📊 워커 결과 저장
        id: results
        run: |
          echo "### 워커 #${{ matrix.worker_id }} 최종 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| 워커 ID | ${{ matrix.worker_id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 총 반복 횟수 | ${{ steps.sync_batches.outputs.iterations }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 총 처리 건수 | ${{ steps.sync_batches.outputs.total_processed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 총 업로드 건수 | ${{ steps.sync_batches.outputs.total_upserted }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 중복 건너뜀 | ${{ steps.sync_batches.outputs.total_duplicate }} |" >> $GITHUB_STEP_SUMMARY

  finalize:
    name: 📊 최종 통계
    runs-on: ubuntu-latest
    needs: [preflight, sync]
    if: always() && needs.preflight.outputs.can_proceed == 'true'
    
    steps:
      - name: 📊 최종 통계 조회
        id: final_stats
        run: |
          echo "📊 최종 Supabase 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          echo "응답:"
          echo "$RESPONSE" | jq '.'
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          echo "### 🌐 전체 동기화 현황" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 레코드 | ${MYSQL_TOTAL}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 완료 | ${SUPABASE_SYNCED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${SYNC_RATE}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${REMAINING}건 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$REMAINING" -eq 0 ]; then
            echo "## ✅ 동기화 완료" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "모든 데이터가 성공적으로 동기화되었습니다! 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔄 동기화 진행 중" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "다음 스케줄에서 계속 진행됩니다." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 📋 실행 정보
        run: |
          echo "### 📋 실행 정보" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **워커 수**: ${{ github.event.inputs.workers || '2' }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **배치 크기**: ${{ github.event.inputs.batch_size || '50' }}건" >> $GITHUB_STEP_SUMMARY
          echo "- **최대 반복**: ${{ github.event.inputs.max_iterations || '500' }}회" >> $GITHUB_STEP_SUMMARY
          echo "- **완료 시간**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

          
          
          

          
          
