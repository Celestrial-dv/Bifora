# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 파일명: rag_sync.yml
# 버전: v4.4
# 위치: .github/workflows/rag_sync.yml
# 목적: GitHub Actions → Cafe24 MySQL → Supabase RAG 지식베이스 동기화
# 
# ✅ v4.5 변경사항 (2025-10-15):
# - [제거] 모든 logs_supabase_writer.php 직접 호출 단계 제거
#   - 📝 세션 시작 로그 (제거)
#   - 📝 배치 결과 로그 업데이트 (제거)
#   - 📝 세션 완료 로그 (제거)
# - [이유] sync_webhook.php에서만 로그 관리하여 중복 방지
# - [결과] GitHub Actions 실행 시 'GitHub_Cron_job' 1개만 생성
#
# ✅ v4.4 변경사항 (2025-10-15):
# - [수정] SYNC_URL에 &source=github 파라미터 추가 (108-112번째 줄)
# - [해결] session_id가 'Webhook_Test' 대신 'GitHub_Cron_job'으로 정상 저장
# - [연관] sync_webhook.php v2.7의 source 파라미터와 연동
# 
# ✅ v4.3 변경사항:
# - [추가] 세션 시작/업데이트/완료 로그 자동 기록
# - [추가] 미완료 로그 자동 정리 (1분 이상 RUNNING 상태)
# - [추가] Cafe24 DB logs_supabase 테이블 연동
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

name: RAG Knowledge Base Sync (Manual Resync Control)

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📌 최적화 설정 요약
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ✅ 배치 크기: 100건 (Supabase timeout 방지)
# ✅ 워커 수: 2개 (API rate limit 준수)
# ✅ 타임아웃: 180분 (충분한 처리 시간)
# ✅ 대기 시간: 3초 (API 부하 분산)
# ✅ 증분 동기화: skip-synced=1 (중복 방지)
# ✅ 재동기화: 수동 실행 시에만 활성화 (세션 타임아웃 방지)
# ✅ source: github (session_id = 'GitHub_Cron_job')
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

on:
  schedule:
    # 매일 오후 11시 55분(한국시간) 실행
    # 한국시간(KST) = UTC + 9시간
    # 23:55 KST = 14:55 UTC
    - cron: '55 14 * * *'
  
  # 수동 실행 옵션
  workflow_dispatch:
    inputs:
      batch_size:
        description: '배치 크기 (기본값: 100)'
        required: false
        default: '100'
        type: choice
        options:
          - '50'
          - '100'
          - '150'
          - '200'
      workers:
        description: '워커 수 (기본값: 2)'
        required: false
        default: '2'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
      max_iterations:
        description: '워커당 최대 반복 횟수 (기본값: 500)'
        required: false
        default: '500'
        type: choice
        options:
          - '100'
          - '200'
          - '500'
          - '1000'
      first_run:
        description: '첫 실행 여부 (Supabase 비어있을 때만 true)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      enable_resync:
        description: '🔄 자동 재동기화 활성화 (권장: false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  CAFE24_SYNC_URL: ${{ secrets.CAFE24_SYNC_URL }}
  SYNC_TOKEN: ${{ secrets.SYNC_TOKEN }}

jobs:
  preflight:
    name: 🔍 사전 진단
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
      mysql_total: ${{ steps.stats.outputs.mysql_total }}
      supabase_synced: ${{ steps.stats.outputs.supabase_synced }}
      remaining: ${{ steps.stats.outputs.remaining }}
      is_first_run: ${{ steps.stats.outputs.is_first_run }}
      batch_size: ${{ steps.params.outputs.batch_size }}
      workers: ${{ steps.params.outputs.workers }}
      max_iterations: ${{ steps.params.outputs.max_iterations }}
      enable_resync: ${{ steps.params.outputs.enable_resync }}
      
    steps:
      - name: ⚙️ 파라미터 설정
        id: params
        run: |
          # 스케줄 실행 vs 수동 실행 구분
          if [ "${{ github.event_name }}" = "schedule" ]; then
            BATCH_SIZE=100
            WORKERS=2
            MAX_ITERATIONS=500
            ENABLE_RESYNC=false
            echo "📅 스케줄 실행: 기본값 사용 (재동기화 비활성화)"
          else
            BATCH_SIZE="${{ github.event.inputs.batch_size || '100' }}"
            WORKERS="${{ github.event.inputs.workers || '2' }}"
            MAX_ITERATIONS="${{ github.event.inputs.max_iterations || '500' }}"
            ENABLE_RESYNC="${{ github.event.inputs.enable_resync || 'false' }}"
            echo "🖱️ 수동 실행: 사용자 입력값 사용"
          fi
          
          echo "batch_size=$BATCH_SIZE" >> $GITHUB_OUTPUT
          echo "workers=$WORKERS" >> $GITHUB_OUTPUT
          echo "max_iterations=$MAX_ITERATIONS" >> $GITHUB_OUTPUT
          echo "enable_resync=$ENABLE_RESYNC" >> $GITHUB_OUTPUT
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚙️ 실행 파라미터"
          echo "  - 배치 크기: ${BATCH_SIZE}"
          echo "  - 워커 수: ${WORKERS}"
          echo "  - 최대 반복: ${MAX_ITERATIONS}"
          echo "  - 🔄 재동기화: ${ENABLE_RESYNC}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: 🔐 토큰 검증
        id: check
        run: |
          if [ -z "${{ env.SYNC_TOKEN }}" ]; then
            echo "❌ SYNC_TOKEN이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          
          if [[ "$BASE_URL" == *"?"* ]]; then
            DIAG_URL="${BASE_URL}&t=${{ env.SYNC_TOKEN }}&diag=1"
          else
            DIAG_URL="${BASE_URL}?t=${{ env.SYNC_TOKEN }}&diag=1"
          fi
          
          RESPONSE=$(curl -s -w "\n%{http_code}" "$DIAG_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ 서버 연결 실패: HTTP $HTTP_CODE"
            echo "$BODY"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 토큰 검증 성공"
          echo "can_proceed=true" >> $GITHUB_OUTPUT
      
      - name: 📊 현재 통계 조회
        id: stats
        if: steps.check.outputs.can_proceed == 'true'
        run: |
          echo "📊 Supabase 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          ERROR=$(echo "$RESPONSE" | jq -r '.error // empty')
          if [ -n "$ERROR" ]; then
            echo "❌ 통계 조회 실패: $ERROR"
            exit 1
          fi
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          # 첫 실행 여부 판단
          IS_FIRST_RUN="${{ github.event.inputs.first_run || 'false' }}"
          if [ "$SUPABASE_SYNCED" -eq 0 ] && [ "$MYSQL_TOTAL" -gt 0 ]; then
            IS_FIRST_RUN="true"
            echo "🆕 첫 실행 자동 감지"
          fi
          
          echo "mysql_total=$MYSQL_TOTAL" >> $GITHUB_OUTPUT
          echo "supabase_synced=$SUPABASE_SYNCED" >> $GITHUB_OUTPUT
          echo "sync_rate=$SYNC_RATE" >> $GITHUB_OUTPUT
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT
          echo "is_first_run=$IS_FIRST_RUN" >> $GITHUB_OUTPUT
          
          echo "### 📊 현재 통계" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 | ${MYSQL_TOTAL}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 | ${SUPABASE_SYNCED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${SYNC_RATE}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${REMAINING}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| 첫 실행 | ${IS_FIRST_RUN} |" >> $GITHUB_STEP_SUMMARY

  sync:
    name: 🔄 워커 ${{ matrix.worker_id }}
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.can_proceed == 'true' && needs.preflight.outputs.remaining > 0
    timeout-minutes: 480
    
    strategy:
      max-parallel: ${{ fromJSON(needs.preflight.outputs.workers) }}
      matrix:
        worker_id: [0, 1, 2, 3]
    
    steps:
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # ✅ [v4.5] 로그 관리는 sync_webhook.php에서만 수행
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🚀 반복 배치 동기화 실행
        if: matrix.worker_id < fromJSON(needs.preflight.outputs.workers)
        id: sync_batches
        env:
          BATCH_SIZE: ${{ needs.preflight.outputs.batch_size }}
          WORKER_ID: ${{ matrix.worker_id }}
          MAX_ITERATIONS: ${{ needs.preflight.outputs.max_iterations }}
          IS_FIRST_RUN: ${{ needs.preflight.outputs.is_first_run }}
          WORKERS: ${{ needs.preflight.outputs.workers }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 워커 #${WORKER_ID} 시작"
          echo "  - 배치 크기: ${BATCH_SIZE}"
          echo "  - 최대 반복: ${MAX_ITERATIONS}"
          echo "  - 첫 실행: ${IS_FIRST_RUN}"
          echo "  - 전체 워커: ${WORKERS}개"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          SYNC_TOKEN="${{ env.SYNC_TOKEN }}"
          
          # 첫 실행이면 skip-synced=0
          if [ "$IS_FIRST_RUN" = "true" ]; then
            SKIP_SYNCED=0
            echo "📌 첫 실행: 중복 체크 비활성화"
          else
            SKIP_SYNCED=1
            echo "📌 재실행: 중복 체크 활성화"
          fi
          
          ITERATION=0
          TOTAL_PROCESSED=0
          TOTAL_UPSERTED=0
          OFFSET=$((WORKER_ID * BATCH_SIZE))
          
          while [ $ITERATION -lt $MAX_ITERATIONS ]; do
            ITERATION=$((ITERATION + 1))
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔄 워커 #${WORKER_ID} - 반복 ${ITERATION}/${MAX_ITERATIONS}"
            echo "  - 오프셋: ${OFFSET}"
            echo "  - 배치 크기: ${BATCH_SIZE}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # ⭐ v4.4: URL 구성 시 source=github 파라미터 추가
            if [[ "$BASE_URL" == *"?"* ]]; then
              SYNC_URL="${BASE_URL}&t=${SYNC_TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=${SKIP_SYNCED}&source=github"
            else
              SYNC_URL="${BASE_URL}?t=${SYNC_TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=${SKIP_SYNCED}&source=github"
            fi
            
            echo "🔗 요청 URL: ...?t=***&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=${SKIP_SYNCED}&source=github"
            
            # HTTP 요청
            RESPONSE=$(curl -s -w "\n%{http_code}" "$SYNC_URL")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "📊 HTTP 응답: ${HTTP_CODE}"
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "❌ HTTP 오류: ${HTTP_CODE}"
              echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY" | head -c 500
              echo "⏸️ 10초 후 재시도..."
              sleep 10
              continue
            fi
            
            # JSON 파싱
            echo "$BODY" | jq '.' > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              echo "⚠️ JSON 파싱 실패"
              echo "$BODY" | head -c 500
              sleep 5
              continue
            fi
            
            # 결과 확인
            OK=$(echo "$BODY" | jq -r '.ok // false')
            PROCESSED=$(echo "$BODY" | jq -r '.batch.processed // 0')
            UPSERTED=$(echo "$BODY" | jq -r '.batch.upserted // 0')
            DUPLICATE=$(echo "$BODY" | jq -r '.batch.duplicate_skipped // 0')
            HAS_MORE=$(echo "$BODY" | jq -r '.config.has_more // false')
            
            echo "✅ 처리 완료:"
            echo "  - 처리: ${PROCESSED}건"
            echo "  - 업로드: ${UPSERTED}건"
            echo "  - 중복: ${DUPLICATE}건"
            echo "  - 추가 데이터: ${HAS_MORE}"
            
            TOTAL_PROCESSED=$((TOTAL_PROCESSED + PROCESSED))
            TOTAL_UPSERTED=$((TOTAL_UPSERTED + UPSERTED))
            
            # 종료 조건
            if [ "$PROCESSED" -eq 0 ] || [ "$HAS_MORE" = "false" ]; then
              echo "🏁 더 이상 처리할 데이터 없음"
              break
            fi
            
            # 다음 오프셋 (워커 수만큼 점프)
            OFFSET=$((OFFSET + BATCH_SIZE * WORKERS))
            
            # API 부하 분산
            sleep 3
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ 워커 #${WORKER_ID} 완료"
          echo "  - 총 반복: ${ITERATION}회"
          echo "  - 총 처리: ${TOTAL_PROCESSED}건"
          echo "  - 총 업로드: ${TOTAL_UPSERTED}건"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  auto_resync:
    name: 🔄 자동 재동기화
    runs-on: ubuntu-latest
    needs: [preflight, sync]
    if: |
      always() && 
      needs.preflight.outputs.can_proceed == 'true' && 
      needs.preflight.outputs.enable_resync == 'true' &&
      (needs.sync.result == 'success' || needs.sync.result == 'skipped')
    
    steps:
      - name: 📊 동기화 후 통계 확인
        id: check_remaining
        run: |
          echo "📊 최종 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT
          echo "sync_rate=$SYNC_RATE" >> $GITHUB_OUTPUT
          
          echo "### 📊 동기화 후 통계" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 남은 데이터: ${REMAINING}건" >> $GITHUB_STEP_SUMMARY
          echo "- 동기화율: ${SYNC_RATE}%" >> $GITHUB_STEP_SUMMARY
          echo "- 재동기화 활성화: ✅ ON" >> $GITHUB_STEP_SUMMARY
      
      - name: 🔄 자동 재동기화 실행
        if: |
          steps.check_remaining.outputs.remaining > 0 && (
            steps.check_remaining.outputs.sync_rate >= 95 ||
            steps.check_remaining.outputs.remaining <= 1000
          )
        run: |
          REMAINING=${{ steps.check_remaining.outputs.remaining }}
          SYNC_RATE=${{ steps.check_remaining.outputs.sync_rate }}
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 자동 재동기화 시작"
          echo "  - 남은 데이터: ${REMAINING}건"
          echo "  - 동기화율: ${SYNC_RATE}%"
          echo "  - 트리거 조건: 95% 이상 OR 1000건 이하"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          RESYNC_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}&action=auto_resync"
          
          RESPONSE=$(curl -s "$RESYNC_URL")
          
          echo "응답:"
          echo "$RESPONSE" | jq '.'
          
          RESYNC_TRIGGERED=$(echo "$RESPONSE" | jq -r '.resync.triggered // false')
          RESYNC_MESSAGE=$(echo "$RESPONSE" | jq -r '.resync.message // ""')
          
          echo "### 🔄 재동기화 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 트리거: ${RESYNC_TRIGGERED}" >> $GITHUB_STEP_SUMMARY
          echo "- 메시지: ${RESYNC_MESSAGE}" >> $GITHUB_STEP_SUMMARY
      
      - name: ℹ️ 재동기화 건너뜀
        if: steps.check_remaining.outputs.remaining == 0
        run: |
          echo "### ℹ️ 재동기화 불필요" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "100% 동기화 완료로 재동기화를 건너뜁니다." >> $GITHUB_STEP_SUMMARY

  finalize:
    name: 📊 최종 통계
    runs-on: ubuntu-latest
    needs: [preflight, sync, auto_resync]
    if: always() && needs.preflight.outputs.can_proceed == 'true'
    
    steps:
      - name: 📊 최종 통계 조회
        run: |
          echo "📊 최종 Supabase 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          sleep 30
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          # 재동기화 상태 확인
          RESYNC_ENABLED="${{ needs.preflight.outputs.enable_resync }}"
          RESYNC_STATUS="❌ OFF (권장)"
          if [ "$RESYNC_ENABLED" = "true" ]; then
            RESYNC_STATUS="✅ ON"
          fi
          
          echo "### 🌐 전체 동기화 현황" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 레코드 | ${MYSQL_TOTAL}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 완료 | ${SUPABASE_SYNCED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${SYNC_RATE}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${REMAINING}건 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚙️ 실행 파라미터" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **배치 크기**: ${{ needs.preflight.outputs.batch_size }}건" >> $GITHUB_STEP_SUMMARY
          echo "- **워커 수**: ${{ needs.preflight.outputs.workers }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **최대 반복**: ${{ needs.preflight.outputs.max_iterations }}회" >> $GITHUB_STEP_SUMMARY
          echo "- **🔄 자동 재동기화**: ${RESYNC_STATUS}" >> $GITHUB_STEP_SUMMARY
          echo "- **📝 로그 관리**: sync_webhook.php (v4.5)" >> $GITHUB_STEP_SUMMARY
          echo "- **✅ source 파라미터**: github" >> $GITHUB_STEP_SUMMARY
          echo "- **완료 시간**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$REMAINING" -eq 0 ]; then
            echo "## ✅ 동기화 완료" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "모든 데이터가 성공적으로 동기화되었습니다! 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔄 동기화 진행 중" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "다음 스케줄에서 계속 진행됩니다." >> $GITHUB_STEP_SUMMARY
          fi
          
          # 재동기화 관련 안내
          if [ "$RESYNC_ENABLED" = "false" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💡 재동기화 안내" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "현재 자동 재동기화가 **비활성화** 상태입니다." >> $GITHUB_STEP_SUMMARY
            echo "필요 시 수동 실행에서 '🔄 자동 재동기화 활성화' 옵션을 true로 설정하세요." >> $GITHUB_STEP_SUMMARY
          fi
      
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # ✅ 미완료 로그 자동 정리
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🧹 미완료 로그 정리
        run: |
          echo "🧹 1분 이상 RUNNING 상태인 로그 정리 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          CLEANUP_URL="${BASE_DIR}/logs_supabase_api.php?action=cleanup&timeout=1"
          
          RESPONSE=$(curl -s "$CLEANUP_URL")
          
          CLEANED=$(echo "$RESPONSE" | jq -r '.cleaned // 0')
          
          if [ "$CLEANED" -gt 0 ]; then
            echo "✅ ${CLEANED}개 로그 정리 완료"
          else
            echo "ℹ️ 정리할 로그 없음"
          fi

