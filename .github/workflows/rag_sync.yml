name: RAG Knowledge Base Sync (Auto Resync)

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📌 최적화 설정 요약
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ✅ 배치 크기: 100건 (Supabase timeout 방지)
# ✅ 워커 수: 2개 (API rate limit 준수)
# ✅ 타임아웃: 180분 (충분한 처리 시간)
# ✅ 대기 시간: 3초 (API 부하 분산)
# ✅ 증분 동기화: skip-synced=1 (중복 방지)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

on:
  schedule:
    # 매일 오후 11시 55분(한국시간) 실행
    # 한국시간(KST) = UTC + 9시간
    # 23:55 KST = 14:55 UTC
    - cron: '55 14 * * *'
  
  # 수동 실행 옵션
  workflow_dispatch:
    inputs:
      batch_size:
        description: '배치 크기 (기본값: 50)'
        required: false
        default: '50'
      workers:
        description: '워커 수 (기본값: 2)'
        required: false
        default: '2'
      max_iterations:
        description: '워커당 최대 반복 횟수 (기본값: 500)'
        required: false
        default: '500'
      # 🆕 첫 실행 여부 옵션 추가
      first_run:
        description: '첫 실행 여부 (기본값: false)'
        required: false
        default: 'false'

env:
  CAFE24_SYNC_URL: ${{ secrets.CAFE24_SYNC_URL }}
  SYNC_TOKEN: ${{ secrets.SYNC_TOKEN }}

jobs:
  preflight:
    name: 🔍 사전 진단
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
      mysql_total: ${{ steps.stats.outputs.mysql_total }}
      supabase_synced: ${{ steps.stats.outputs.supabase_synced }}
      remaining: ${{ steps.stats.outputs.remaining }}
      is_first_run: ${{ steps.stats.outputs.is_first_run }}
      
    steps:
      - name: 🔐 토큰 검증
        id: check
        run: |
          if [ -z "${{ env.SYNC_TOKEN }}" ]; then
            echo "❌ SYNC_TOKEN이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          
          if [[ "$BASE_URL" == *"?"* ]]; then
            DIAG_URL="${BASE_URL}&t=${{ env.SYNC_TOKEN }}&diag=1"
          else
            DIAG_URL="${BASE_URL}?t=${{ env.SYNC_TOKEN }}&diag=1"
          fi
          
          RESPONSE=$(curl -s -w "\n%{http_code}" "$DIAG_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ 서버 연결 실패: HTTP $HTTP_CODE"
            echo "$BODY"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 토큰 검증 성공"
          echo "$BODY" | jq '.'
          echo "can_proceed=true" >> $GITHUB_OUTPUT
      
      - name: 📊 현재 통계 조회
        id: stats
        if: steps.check.outputs.can_proceed == 'true'
        run: |
          echo "📊 Supabase 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          echo "응답:"
          echo "$RESPONSE" | jq '.'
          
          ERROR=$(echo "$RESPONSE" | jq -r '.error // empty')
          if [ -n "$ERROR" ]; then
            echo "❌ 통계 조회 실패: $ERROR"
            exit 1
          fi
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          # 🆕 첫 실행 여부 판단 (Supabase에 데이터가 없으면 첫 실행)
          IS_FIRST_RUN="false"
          if [ "$SUPABASE_SYNCED" -eq 0 ] && [ "$MYSQL_TOTAL" -gt 0 ]; then
            IS_FIRST_RUN="true"
            echo "🆕 첫 실행 감지: Supabase에 데이터가 없습니다."
          fi
          
          echo "mysql_total=$MYSQL_TOTAL" >> $GITHUB_OUTPUT
          echo "supabase_synced=$SUPABASE_SYNCED" >> $GITHUB_OUTPUT
          echo "sync_rate=$SYNC_RATE" >> $GITHUB_OUTPUT
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT
          echo "is_first_run=$IS_FIRST_RUN" >> $GITHUB_OUTPUT
          
          echo "### 📊 현재 통계" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 | ${MYSQL_TOTAL}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 | ${SUPABASE_SYNCED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${SYNC_RATE}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${REMAINING}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **첫 실행** | **${IS_FIRST_RUN}** |" >> $GITHUB_STEP_SUMMARY

  sync:
    name: 🔄 워커 ${{ matrix.worker_id }}
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.can_proceed == 'true' && needs.preflight.outputs.remaining > 0
    timeout-minutes: 480
    
    strategy:
      max-parallel: 2
      matrix:
        worker_id: [0, 1]
    
    steps:
      - name: 🚀 반복 배치 동기화 실행
        id: sync_batches
        env:
          BATCH_SIZE: ${{ github.event.inputs.batch_size || '50' }}
          WORKER_ID: ${{ matrix.worker_id }}
          MAX_ITERATIONS: ${{ github.event.inputs.max_iterations || '500' }}
          IS_FIRST_RUN: ${{ needs.preflight.outputs.is_first_run }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 워커 #${WORKER_ID} 시작"
          echo "  - 배치 크기: ${BATCH_SIZE}"
          echo "  - 최대 반복: ${MAX_ITERATIONS}"
          echo "  - 첫 실행: ${IS_FIRST_RUN}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          SYNC_TOKEN="${{ env.SYNC_TOKEN }}"
          
          # 🆕 첫 실행이면 skip-synced=0, 아니면 skip-synced=1
          if [ "$IS_FIRST_RUN" = "true" ]; then
            SKIP_SYNCED=0
            echo "📌 첫 실행: 중복 체크 비활성화 (skip-synced=0)"
          else
            SKIP_SYNCED=1
            echo "📌 재실행: 중복 체크 활성화 (skip-synced=1)"
          fi
          
          ITERATION=0
          TOTAL_PROCESSED=0
          OFFSET=$((WORKER_ID * BATCH_SIZE))
          
          while [ $ITERATION -lt $MAX_ITERATIONS ]; do
            ITERATION=$((ITERATION + 1))
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔄 워커 #${WORKER_ID} - 반복 ${ITERATION}/${MAX_ITERATIONS}"
            echo "  - 오프셋: ${OFFSET}"
            echo "  - 배치 크기: ${BATCH_SIZE}"
            echo "  - 중복 건너뛰기: ${SKIP_SYNCED}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # URL 구성
            if [[ "$BASE_URL" == *"?"* ]]; then
              SYNC_URL="${BASE_URL}&t=${SYNC_TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=${SKIP_SYNCED}"
            else
              SYNC_URL="${BASE_URL}?t=${SYNC_TOKEN}&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=${SKIP_SYNCED}"
            fi
            
            echo "🔗 요청 URL: ${SYNC_URL%\?t=*}?t=***&batch=${BATCH_SIZE}&offset=${OFFSET}&skip-synced=${SKIP_SYNCED}"
            
            # HTTP 요청
            RESPONSE=$(curl -s -w "\n%{http_code}" "$SYNC_URL")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "📊 HTTP 응답 코드: ${HTTP_CODE}"
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "❌ HTTP 오류: ${HTTP_CODE}"
              echo "$BODY" | jq '.' || echo "$BODY"
              echo "⏸️ 5초 후 재시도..."
              sleep 5
              continue
            fi
            
            # JSON 파싱
            echo "$BODY" | jq '.' > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              echo "⚠️ JSON 파싱 실패, 원본 응답:"
              echo "$BODY" | head -c 500
              echo "⏸️ 5초 후 재시도..."
              sleep 5
              continue
            fi
            
            # 결과 확인
            OK=$(echo "$BODY" | jq -r '.ok // false')
            PROCESSED=$(echo "$BODY" | jq -r '.batch.processed // 0')
            UPSERTED=$(echo "$BODY" | jq -r '.batch.upserted // 0')
            HAS_MORE=$(echo "$BODY" | jq -r '.config.has_more // false')
            
            echo "✅ 처리 완료:"
            echo "  - 처리: ${PROCESSED}건"
            echo "  - 업로드: ${UPSERTED}건"
            echo "  - 추가 데이터: ${HAS_MORE}"
            
            TOTAL_PROCESSED=$((TOTAL_PROCESSED + PROCESSED))
            
            # 종료 조건
            if [ "$PROCESSED" -eq 0 ] || [ "$HAS_MORE" = "false" ]; then
              echo "🏁 더 이상 처리할 데이터 없음"
              break
            fi
            
            # 다음 오프셋 계산 (워커 수만큼 증가)
            OFFSET=$((OFFSET + BATCH_SIZE * 2))
            
            # 대기 시간 (API 부하 분산)
            sleep 3
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ 워커 #${WORKER_ID} 완료"
          echo "  - 총 반복: ${ITERATION}회"
          echo "  - 총 처리: ${TOTAL_PROCESSED}건"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ⚡ 신규: 재동기화 자동 실행
  auto_resync:
    name: 🔄 자동 재동기화
    runs-on: ubuntu-latest
    needs: [preflight, sync]
    if: always() && needs.preflight.outputs.can_proceed == 'true'
    
    steps:
      - name: 📊 동기화 후 통계 확인
        id: check_remaining
        run: |
          echo "📊 최종 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT
          echo "sync_rate=$SYNC_RATE" >> $GITHUB_OUTPUT
          
          echo "### 📊 동기화 후 통계" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 남은 데이터: ${REMAINING}건" >> $GITHUB_STEP_SUMMARY
          echo "- 동기화율: ${SYNC_RATE}%" >> $GITHUB_STEP_SUMMARY
      
      - name: 🔄 자동 재동기화 실행
        if: steps.check_remaining.outputs.remaining > 0 && steps.check_remaining.outputs.remaining <= 500
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 자동 재동기화 시작"
          echo "  - 남은 데이터: ${{ steps.check_remaining.outputs.remaining }}건"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          RESYNC_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}&action=auto_resync"
          
          RESPONSE=$(curl -s "$RESYNC_URL")
          
          echo "응답:"
          echo "$RESPONSE" | jq '.'

  finalize:
    name: 📊 최종 통계
    runs-on: ubuntu-latest
    needs: [preflight, sync, auto_resync]
    if: always() && needs.preflight.outputs.can_proceed == 'true'
    
    steps:
      - name: 📊 최종 통계 조회
        run: |
          echo "📊 최종 Supabase 통계 조회 중..."
          
          BASE_URL="${{ env.CAFE24_SYNC_URL }}"
          BASE_DIR=$(dirname "$BASE_URL")
          
          STATS_URL="${BASE_DIR}/sync_stats.php?t=${{ env.SYNC_TOKEN }}"
          
          sleep 30
          
          RESPONSE=$(curl -s "$STATS_URL")
          
          echo "응답:"
          echo "$RESPONSE" | jq '.'
          
          MYSQL_TOTAL=$(echo "$RESPONSE" | jq -r '.mysql_total // 0')
          SUPABASE_SYNCED=$(echo "$RESPONSE" | jq -r '.supabase_synced // 0')
          SYNC_RATE=$(echo "$RESPONSE" | jq -r '.sync_rate // 0')
          REMAINING=$(echo "$RESPONSE" | jq -r '.remaining // 0')
          
          echo "### 🌐 전체 동기화 현황" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---:|" >> $GITHUB_STEP_SUMMARY
          echo "| MySQL 전체 레코드 | ${MYSQL_TOTAL}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| Supabase 동기화 완료 | ${SUPABASE_SYNCED}건 |" >> $GITHUB_STEP_SUMMARY
          echo "| **동기화율** | **${SYNC_RATE}%** |" >> $GITHUB_STEP_SUMMARY
          echo "| 남은 데이터 | ${REMAINING}건 |" >> $GITHUB_STEP_SUMMARY
          echo "- **워커 수**: ${{ github.event.inputs.workers || '2' }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **배치 크기**: ${{ github.event.inputs.batch_size || '50' }}건" >> $GITHUB_STEP_SUMMARY
          echo "- **최대 반복**: ${{ github.event.inputs.max_iterations || '500' }}회" >> $GITHUB_STEP_SUMMARY
          echo "- **완료 시간**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$REMAINING" -eq 0 ]; then
            echo "## ✅ 동기화 완료" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "모든 데이터가 성공적으로 동기화되었습니다! 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔄 동기화 진행 중" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "다음 스케줄에서 계속 진행됩니다." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 📋 실행 정보
        run: |
          echo "### 📋 실행 정보" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **워커 수**: ${{ github.event.inputs.workers || '2' }}개" >> $GITHUB_STEP_SUMMARY
          echo "- **배치 크기**: ${{ github.event.inputs.batch_size || '50' }}건" >> $GITHUB_STEP_SUMMARY
          echo "- **최대 반복**: ${{ github.event.inputs.max_iterations || '500' }}회" >> $GITHUB_STEP_SUMMARY
          echo "- **자동 재동기화**: 활성화 (임계값: 500건)" >> $GITHUB_STEP_SUMMARY
          echo "- **완료 시간**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

          
          
