# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# COSING (EU CosIng) 화장품 성분 자동 동기화 Workflow v1.2-temp
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# ⚠️ TEMPORARY VERSION: Secret 추가 전 테스트용
# 정식 사용 시 v1.2로 교체 필요 (Secret 사용)
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

name: COSING Data Sync (EU CosIng 성분) v1.2-temp

on:
  schedule:
    - cron: '0 13 * * *'
  
  workflow_dispatch:
    inputs:
      force_run:
        description: '강제 실행 (true: 전체 재수집, false: 일반 실행)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  # ⚠️ 임시: Secret 대신 직접 URL 사용
  DATA_SYNC_WEBHOOK_URL: "https://biplex.mycafe24.com/biplex/data_sync_webhook.php"
  SYNC_TOKEN: ${{ secrets.SYNC_TOKEN }}

jobs:
  preflight:
    name: 🔍 사전 진단
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
      
    steps:
      - name: ⚙️ 환경 변수 확인
        id: check
        run: |
          echo "🔍 환경 변수 검증 중..."
          
          # Webhook URL 확인
          if [ -z "${{ env.DATA_SYNC_WEBHOOK_URL }}" ]; then
            echo "❌ DATA_SYNC_WEBHOOK_URL이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 토큰 확인
          if [ -z "${{ env.SYNC_TOKEN }}" ]; then
            echo "❌ SYNC_TOKEN이 설정되지 않았습니다."
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 환경 변수 검증 완료"
          echo "can_proceed=true" >> $GITHUB_OUTPUT
      
      - name: 🌐 서버 연결 테스트
        run: |
          echo "🌐 서버 연결 확인 중..."
          
          # 직접 Webhook URL 사용
          WEBHOOK_URL="${{ env.DATA_SYNC_WEBHOOK_URL }}"
          
          echo "📍 테스트 URL: $WEBHOOK_URL"
          
          # HEAD 요청으로 서버 연결 확인
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X HEAD "$WEBHOOK_URL" || echo "000")
          
          if [ "$HTTP_CODE" == "000" ]; then
            echo "❌ 서버에 연결할 수 없습니다."
            exit 1
          elif [ "$HTTP_CODE" == "404" ]; then
            echo "⚠️  data_sync_webhook.php 파일을 찾을 수 없습니다. (HTTP 404)"
            echo "📍 예상 경로: $WEBHOOK_URL"
            exit 1
          else
            echo "✅ 서버 연결 성공 (HTTP $HTTP_CODE)"
          fi
      
      - name: 📊 사전 진단 결과
        run: |
          echo "## 🔍 사전 진단 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 환경 변수 | ✅ 정상 |" >> $GITHUB_STEP_SUMMARY
          echo "| 서버 연결 | ✅ 정상 |" >> $GITHUB_STEP_SUMMARY
          echo "| 실행 가능 | ✅ 예 |" >> $GITHUB_STEP_SUMMARY

  sync_cosing:
    name: 🚀 COSING 데이터 동기화
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.can_proceed == 'true'
    timeout-minutes: 90
    
    steps:
      - name: 🎬 동기화 시작
        id: start_sync
        run: |
          echo "🎬 COSING EU 성분 데이터 수집을 시작합니다..."
          echo "📅 실행 시각: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "🔧 실행 모드: ${{ github.event_name }}"
          
          # 직접 Webhook URL 사용
          WEBHOOK_URL="${{ env.DATA_SYNC_WEBHOOK_URL }}"
          
          echo "WEBHOOK_URL=${WEBHOOK_URL}" >> $GITHUB_OUTPUT
      
      - name: 📡 Webhook 호출 (COSING 동기화 트리거)
        id: trigger
        run: |
          WEBHOOK_URL="${{ steps.start_sync.outputs.WEBHOOK_URL }}"
          
          # URL 파라미터 구성
          FULL_URL="${WEBHOOK_URL}?type=cosing&source=github&token=${{ env.SYNC_TOKEN }}"
          
          echo "📡 Webhook 호출 중..."
          echo "🔗 URL: ${WEBHOOK_URL}?type=cosing&source=github"
          
          # POST 요청으로 동기화 트리거
          RESPONSE=$(curl -X POST \
            -H "Content-Type: application/json" \
            -w "\n%{http_code}" \
            -s \
            --max-time 300 \
            "$FULL_URL")
          
          # HTTP 상태 코드 추출
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "📥 응답 코드: $HTTP_CODE"
          echo "📄 응답 내용: $BODY"
          
          # 응답 저장
          echo "$BODY" > response.json
          
          # 결과 검증
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Webhook 호출 실패 (HTTP $HTTP_CODE)"
            exit 1
          fi
          
          # JSON 파싱 (success 필드 확인)
          SUCCESS=$(echo "$BODY" | jq -r '.success // false')
          
          if [ "$SUCCESS" != "true" ]; then
            echo "❌ 동기화 실패"
            MESSAGE=$(echo "$BODY" | jq -r '.message // "알 수 없는 오류"')
            echo "오류 메시지: $MESSAGE"
            exit 1
          fi
          
          echo "✅ Webhook 호출 성공"
      
      - name: ⏳ 동기화 진행 대기 (10분)
        run: |
          echo "⏳ COSING CSV 다운로드 및 파싱이 진행 중입니다. 10분 대기..."
          echo "💡 cosing_fetch.php가 백그라운드에서 실행 중입니다."
          echo "📦 약 7,000개 이상의 성분 데이터를 처리합니다."
          echo "✅ v1.1: 다른 크론잡과 동시 실행 가능 (비동기 처리)"
          
          sleep 600
          
          echo "✅ 대기 완료"
      
      - name: 📊 동기화 결과 확인
        id: check_result
        run: |
          # Webhook URL에서 베이스 디렉토리 추출
          WEBHOOK_URL="${{ env.DATA_SYNC_WEBHOOK_URL }}"
          BASE_DIR=$(dirname "$WEBHOOK_URL")
          
          # monitor_api.php를 통해 통계 확인
          STATS_URL="${BASE_DIR}/monitor_api.php?action=statistics"
          
          echo "📊 동기화 결과 조회 중..."
          STATS=$(curl -s "$STATS_URL")
          
          echo "📄 통계 데이터:"
          echo "$STATS" | jq '.'
          
          # COSING 통계 추출
          COSING_TOTAL=$(echo "$STATS" | jq -r '.data.cosing.total // 0')
          COSING_LAST_FETCH=$(echo "$STATS" | jq -r '.data.cosing.last_fetch.date // "없음"')
          COSING_STATUS=$(echo "$STATS" | jq -r '.data.cosing.last_fetch.status // "알 수 없음"')
          
          echo "COSING_TOTAL=${COSING_TOTAL}" >> $GITHUB_OUTPUT
          echo "COSING_LAST_FETCH=${COSING_LAST_FETCH}" >> $GITHUB_OUTPUT
          echo "COSING_STATUS=${COSING_STATUS}" >> $GITHUB_OUTPUT
          
          echo "✅ 결과 확인 완료"
      
      - name: 📋 최종 결과 요약
        run: |
          echo "## 🎉 COSING 동기화 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 수집 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 전체 성분 수 | ${{ steps.check_result.outputs.COSING_TOTAL }}개 |" >> $GITHUB_STEP_SUMMARY
          echo "| 마지막 수집 | ${{ steps.check_result.outputs.COSING_LAST_FETCH }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 상태 | ${{ steps.check_result.outputs.COSING_STATUS }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 실행 정보" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 시각**: $(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 방식**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **데이터 소스**: EU CosIng CSV (Archive.org)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_result.outputs.COSING_STATUS }}" == "SUCCESS" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **동기화 성공!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️  **동기화 상태 확인 필요**" >> $GITHUB_STEP_SUMMARY
          fi

  on_failure:
    name: ❌ 실패 처리
    runs-on: ubuntu-latest
    needs: [preflight, sync_cosing]
    if: failure()
    
    steps:
      - name: 📧 실패 알림
        run: |
          echo "## ❌ COSING 동기화 실패" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "동기화 작업이 실패했습니다." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 확인 사항" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. GitHub Secrets 설정 확인 (DATA_SYNC_WEBHOOK_URL, SYNC_TOKEN)" >> $GITHUB_STEP_SUMMARY
          echo "2. data_sync_webhook.php 파일 존재 확인" >> $GITHUB_STEP_SUMMARY
          echo "3. CosIng CSV URL 접근 가능 여부 확인" >> $GITHUB_STEP_SUMMARY
          echo "4. 서버 로그 확인 (api_fetch_logs 테이블)" >> $GITHUB_STEP_SUMMARY
          echo "5. 서버 메모리/타임아웃 설정 확인" >> $GITHUB_STEP_SUMMARY